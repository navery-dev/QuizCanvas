# Generated by Django 4.2.7 on 2025-05-29 02:34

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='File',
            fields=[
                ('fileID', models.AutoField(primary_key=True, serialize=False)),
                ('fileName', models.CharField(max_length=50)),
                ('filePath', models.CharField(max_length=100)),
                ('fileType', models.CharField(max_length=4)),
                ('uploadDate', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'File',
                'verbose_name_plural': 'Files',
                'db_table': 'file',
                'ordering': ['-uploadDate'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('quizID', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('fileID', models.ForeignKey(db_column='fileID', on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='quizapp.file')),
            ],
            options={
                'verbose_name': 'Quiz',
                'verbose_name_plural': 'Quizzes',
                'db_table': 'quiz',
                'ordering': ['-quizID'],
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('userID', models.AutoField(primary_key=True, serialize=False)),
                ('userName', models.CharField(max_length=10)),
                ('email', models.EmailField(max_length=50)),
                ('password', models.CharField(max_length=20)),
                ('dateJoined', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('sectionID', models.AutoField(primary_key=True, serialize=False)),
                ('sectionName', models.CharField(blank=True, max_length=50, null=True)),
                ('sectionDesc', models.CharField(blank=True, max_length=200, null=True)),
                ('quizID', models.ForeignKey(db_column='quizID', on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='quizapp.quiz')),
            ],
            options={
                'verbose_name': 'Section',
                'verbose_name_plural': 'Sections',
                'db_table': 'section',
                'ordering': ['quizID', 'sectionName'],
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('attemptID', models.AutoField(primary_key=True, serialize=False)),
                ('startTime', models.DateTimeField(auto_now_add=True)),
                ('endTime', models.DateTimeField(blank=True, null=True)),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('completed', models.BooleanField(default=False)),
                ('quizID', models.ForeignKey(db_column='quizID', on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='quizapp.quiz')),
                ('userID', models.ForeignKey(db_column='userID', on_delete=django.db.models.deletion.CASCADE, related_name='quizAttempts', to='quizapp.users')),
            ],
            options={
                'verbose_name': 'Quiz Attempt',
                'verbose_name_plural': 'Quiz Attempts',
                'db_table': 'quizattempt',
                'ordering': ['-startTime'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('questionID', models.AutoField(primary_key=True, serialize=False)),
                ('questionText', models.CharField(max_length=500)),
                ('answerOptions', models.JSONField()),
                ('answerIndex', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)])),
                ('quizID', models.ForeignKey(db_column='quizID', on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='quizapp.quiz')),
                ('sectionID', models.ForeignKey(db_column='sectionID', on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='quizapp.section')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'db_table': 'question',
                'ordering': ['quizID', 'questionID'],
            },
        ),
        migrations.AddField(
            model_name='file',
            name='userID',
            field=models.ForeignKey(db_column='userID', on_delete=django.db.models.deletion.CASCADE, related_name='files', to='quizapp.users'),
        ),
        migrations.CreateModel(
            name='Progress',
            fields=[
                ('progressID', models.AutoField(primary_key=True, serialize=False)),
                ('attemptsCount', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999)])),
                ('bestScore', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('lastAttemptDate', models.DateTimeField(blank=True, null=True)),
                ('masteryLevel', models.CharField(choices=[('Not Started', 'Not Started'), ('Beginner', 'Beginner'), ('Intermediate', 'Intermediate'), ('Advanced', 'Advanced'), ('Mastered', 'Mastered')], default='Not Started', max_length=20)),
                ('quizID', models.ForeignKey(db_column='quizID', on_delete=django.db.models.deletion.CASCADE, related_name='userProgress', to='quizapp.quiz')),
                ('sectionID', models.ForeignKey(blank=True, db_column='sectionID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='userProgress', to='quizapp.section')),
                ('userID', models.ForeignKey(db_column='userID', on_delete=django.db.models.deletion.CASCADE, related_name='progress', to='quizapp.users')),
            ],
            options={
                'verbose_name': 'Progress',
                'verbose_name_plural': 'Progress Records',
                'db_table': 'progress',
                'ordering': ['-lastAttemptDate'],
                'unique_together': {('userID', 'quizID', 'sectionID')},
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('userAnswerID', models.AutoField(primary_key=True, serialize=False)),
                ('selectedOption', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)])),
                ('isCorrect', models.BooleanField()),
                ('responseTime', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999)])),
                ('attemptID', models.ForeignKey(db_column='attemptID', on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='quizapp.quizattempt')),
                ('questionID', models.ForeignKey(db_column='questionID', on_delete=django.db.models.deletion.CASCADE, related_name='userAnswers', to='quizapp.question')),
            ],
            options={
                'verbose_name': 'Answer',
                'verbose_name_plural': 'Answers',
                'db_table': 'answer',
                'unique_together': {('attemptID', 'questionID')},
            },
        ),
    ]
